//CIRCULAR LINKED LIST

#include<stdio.h>
#include<stdlib.h>

struct cll
{
	int data;
	struct cll *next;
};

typedef struct cll node;

node *create(node *first)
{
	node *new;
	node *temp=first;
	int x;
	printf("enter data(enter -1 to stop)\n");
	scanf("%d",&x);
	while(x!=-1)
	{
		new=(node*)malloc(sizeof(node));
		new->data=x;
		new->next=NULL;
		if(first==NULL)
		{
			first=new;
		    temp=new;
		}
		else
		{
			temp->next=new;
			temp=new;
		}
		printf("enter data(enter -1 to stop)\n");
		scanf("%d",&x);
	}
	temp->next=first;
	return first;
}

void display(node *first)
{
	node *temp=first;
	if(first==NULL)
	{
		printf("no elements to display\n");
	}
	else
	{
		do
		{
			printf("|%d|->",temp->data);
			temp=temp->next;
		}while(temp!=first);
		printf("|%d|",temp->data);
	}
}

int count(node *first)
{
	int c=0;
	node *temp=first;
	if(first==NULL)
	{
		printf("there are no elements in the given list\n");
	}
	else
	{
		do
		{
			c++;
			temp=temp->next;
		}while(temp!=first);
	}
	return c;
}

void search(node *first,int x)
{
	node *temp=first;
	int flag=0;
	if(first==NULL)
	{
		printf("no list to search\n");
	}
	else
	{
		do
		{
			if(temp->data==x)
			{
				flag=1;
				break;
			}
			else
			{
				temp=temp->next;
			}
		}while(temp!=first);
	}
	if(flag==1)
	{
		printf("%d is found in the given linked list\n",x);
	}
	else
	{
		printf("%d is not found in the given linked list\n",x);
	}
}

node *insert_at_begin(node *first,int x);
{
	node *temp=first;
	node *new=(node*)malloc(sizeof(node));
	new->data=x;
	new->next=NULL;
	if(first==NULL)
	{
		first=new;
		new->next=first;
	}
	else
	{
		while(temp->next!=first)
		{
			temp=temp->next;
		}
		temp->next=new;
		new->next=first;
		first=new;
	}
	return first;
}

node *insert_at_end(node *first,int x)
{
	node *temp=first;
	node *new=(node*)malloc(sizeof(node));
	new->data=x;
	new->next=NULL;
	if(first==NULL)
	{
		first=new;
		new->next=first;
	}
	else
	{
	while(temp->next!=first)
	{
		temp=temp->next;
	}
	temp->next=new;
	new->next=first;
    }
	return first;
}

node *insert_at_pos(node *first,int pos,int x)
{
	node *temp=first;
	int i;
	int n=count(first);
	if(pos>0 && pos<n)
	{
	node *new=(node*)malloc(sizeof(node));
	new->data=x;
	new->next=NULL;
	for(i=1,i<pos-1;i++)
	{
		temp=temp->next;
	}
	new->next=temp->next;
	temp->next=new;
	}
	return first;
}

node *delete(node *first;int x)
{
	node *temp=first;
	if(first==NULL)
	{
		printf("no element in the list to delete\n");
	}
	else
	{
		while(temp->next!=first)
		{
			if(temp->data==x)
			{
				
			}
		}
	}
}



HASHING

#include <stdio.h>
#include <stdlib.h>
int hash(int x)
{
    return x%10;
}
void insert(int a[10],int x)
{
    int flag=0,j;
    int i=hash(x);
    if (a[i]==-1)
    {
        a[i]=x;
        flag=1;
    }
    else
    {
        j=i+1;
        while(j%10!=i)
        {
            if(a[j]==-1)
            {
                a[j]=x;
                flag=1;
                break;
            }
            j++;
        }
    }
    if (flag==0)
    {
        printf("No slot to insert element\n");
    }
}
void search(int a[10],int x)
{
    int flag=0,j;
    int i=hash(x);
    if (a[i]==x)
    {
        flag=1;
    }
    else
    {
        j=i+1;
        while(j%10!=i)
        {
            if (a[j]==x)
            {
                flag=1;
                break;
            }
            j++;
        }
    }
    if (flag)
    {
        printf("Element found\n");
    }
    else
    {
        printf("Element not found");
    }
}
void delete(int a[10],int x)
{
    int flag=0,j;
    int i=hash(x);
    if (a[i]==x)
    {
        a[i]=-1;
        flag=1;
    }
    else
    {
        j=i+1;
        while(j%10!=i)
        {
            if (a[j]==x)
            {
                a[j]=-1;
                flag=1;
                break;
            }
            j++;
        }
    }
    if (flag==0)
    {
        printf("Element not found to delete\n");
    }
}
void display(int a[10])
{
    int i;
    for (i=0;i<10;i++)
    {
        printf("%3d",a[i]);
    }
    printf("\n");
}
int main()
{
    int a[10],i,x1,x2,x3,ch;
    for (i=0;i<10;i++)
    {
        a[i]=-1;
    }
    while(1)
    {
        printf("1:Insert\n2:Display\n3:Search\n4:Delete\n5:Exit\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("Enter a value to insert\n");
                    scanf("%d",&x1);
                    do
                    {
                        insert(a,x1);
                        printf("Enter a value(Enter -1 to stop)\n");
                        scanf("%d",&x1);
                    }while(x1!=-1);
                    break;
            case 2: display(a);
                    break;
            case 3: printf("Enter element to search\n");
                    scanf("%d",&x2);
                    search(a,x2);
                    break;
            case 4: printf("Enter element to delete\n");
                    scanf("%d",&x3);
                    delete(a,x3);
                    display(a);
                    break;
            case 5: exit(0);
            default:printf("Enter a valid choice\n");
                    break;
        }
    }
    return 0;
}
